// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Dinosaur.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class DinosaurHandler : virtual public DinosaurIf {
 public:
  DinosaurHandler() {
    // Your initialization goes here
  }

  void registerClient(RegisterClientResults& _return, const std::string& email, const std::string& highScoreName, const EntityType::type type) {
    // Your implementation goes here
    printf("registerClient\n");
  }

  void hatch(DinosaurState& _return, const int64_t eggID) {
    // Your implementation goes here
    printf("hatch\n");
  }

  void egg(EggResults& _return, const Direction::type direction, const int32_t calories_given) {
    // Your implementation goes here
    printf("egg\n");
  }

  void look(LookResults& _return, const Direction::type direction) {
    // Your implementation goes here
    printf("look\n");
  }

  void grow(GrowResults& _return) {
    // Your implementation goes here
    printf("grow\n");
  }

  void move(MoveResults& _return, const Direction::type direction) {
    // Your implementation goes here
    printf("move\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DinosaurHandler> handler(new DinosaurHandler());
  shared_ptr<TProcessor> processor(new DinosaurProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

