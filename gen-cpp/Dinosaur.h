/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Dinosaur_H
#define Dinosaur_H

#include <TProcessor.h>
#include "dinoisland_types.h"



class DinosaurIf {
 public:
  virtual ~DinosaurIf() {}
  virtual void registerClient(RegisterClientResults& _return, const std::string& email, const std::string& highScoreName, const EntityType::type type) = 0;
  virtual void hatch(DinosaurState& _return, const int64_t eggID) = 0;
  virtual void egg(EggResults& _return, const Direction::type direction, const int32_t calories_given) = 0;
  virtual void look(LookResults& _return, const Direction::type direction) = 0;
  virtual void grow(GrowResults& _return) = 0;
  virtual void move(MoveResults& _return, const Direction::type direction) = 0;
};

class DinosaurNull : virtual public DinosaurIf {
 public:
  virtual ~DinosaurNull() {}
  void registerClient(RegisterClientResults& /* _return */, const std::string& /* email */, const std::string& /* highScoreName */, const EntityType::type /* type */) {
    return;
  }
  void hatch(DinosaurState& /* _return */, const int64_t /* eggID */) {
    return;
  }
  void egg(EggResults& /* _return */, const Direction::type /* direction */, const int32_t /* calories_given */) {
    return;
  }
  void look(LookResults& /* _return */, const Direction::type /* direction */) {
    return;
  }
  void grow(GrowResults& /* _return */) {
    return;
  }
  void move(MoveResults& /* _return */, const Direction::type /* direction */) {
    return;
  }
};

typedef struct _Dinosaur_registerClient_args__isset {
  _Dinosaur_registerClient_args__isset() : email(false), highScoreName(false), type(false) {}
  bool email;
  bool highScoreName;
  bool type;
} _Dinosaur_registerClient_args__isset;

class Dinosaur_registerClient_args {
 public:

  Dinosaur_registerClient_args() : email(""), highScoreName("") {
  }

  virtual ~Dinosaur_registerClient_args() throw() {}

  std::string email;
  std::string highScoreName;
  EntityType::type type;

  _Dinosaur_registerClient_args__isset __isset;

  bool operator == (const Dinosaur_registerClient_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(highScoreName == rhs.highScoreName))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_registerClient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_registerClient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dinosaur_registerClient_pargs {
 public:


  virtual ~Dinosaur_registerClient_pargs() throw() {}

  const std::string* email;
  const std::string* highScoreName;
  const EntityType::type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_registerClient_result__isset {
  _Dinosaur_registerClient_result__isset() : success(false), alreadyRegistered(false) {}
  bool success;
  bool alreadyRegistered;
} _Dinosaur_registerClient_result__isset;

class Dinosaur_registerClient_result {
 public:

  Dinosaur_registerClient_result() {
  }

  virtual ~Dinosaur_registerClient_result() throw() {}

  RegisterClientResults success;
  AlreadyRegisteredException alreadyRegistered;

  _Dinosaur_registerClient_result__isset __isset;

  bool operator == (const Dinosaur_registerClient_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(alreadyRegistered == rhs.alreadyRegistered))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_registerClient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_registerClient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_registerClient_presult__isset {
  _Dinosaur_registerClient_presult__isset() : success(false), alreadyRegistered(false) {}
  bool success;
  bool alreadyRegistered;
} _Dinosaur_registerClient_presult__isset;

class Dinosaur_registerClient_presult {
 public:


  virtual ~Dinosaur_registerClient_presult() throw() {}

  RegisterClientResults* success;
  AlreadyRegisteredException alreadyRegistered;

  _Dinosaur_registerClient_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dinosaur_hatch_args__isset {
  _Dinosaur_hatch_args__isset() : eggID(false) {}
  bool eggID;
} _Dinosaur_hatch_args__isset;

class Dinosaur_hatch_args {
 public:

  Dinosaur_hatch_args() : eggID(0) {
  }

  virtual ~Dinosaur_hatch_args() throw() {}

  int64_t eggID;

  _Dinosaur_hatch_args__isset __isset;

  bool operator == (const Dinosaur_hatch_args & rhs) const
  {
    if (!(eggID == rhs.eggID))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_hatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_hatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dinosaur_hatch_pargs {
 public:


  virtual ~Dinosaur_hatch_pargs() throw() {}

  const int64_t* eggID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_hatch_result__isset {
  _Dinosaur_hatch_result__isset() : success(false), badEgg(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool badEgg;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_hatch_result__isset;

class Dinosaur_hatch_result {
 public:

  Dinosaur_hatch_result() {
  }

  virtual ~Dinosaur_hatch_result() throw() {}

  DinosaurState success;
  BadEggException badEgg;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_hatch_result__isset __isset;

  bool operator == (const Dinosaur_hatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(badEgg == rhs.badEgg))
      return false;
    if (!(youAreDead == rhs.youAreDead))
      return false;
    if (!(gameOver == rhs.gameOver))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_hatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_hatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_hatch_presult__isset {
  _Dinosaur_hatch_presult__isset() : success(false), badEgg(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool badEgg;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_hatch_presult__isset;

class Dinosaur_hatch_presult {
 public:


  virtual ~Dinosaur_hatch_presult() throw() {}

  DinosaurState* success;
  BadEggException badEgg;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_hatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dinosaur_egg_args__isset {
  _Dinosaur_egg_args__isset() : direction(false), calories_given(false) {}
  bool direction;
  bool calories_given;
} _Dinosaur_egg_args__isset;

class Dinosaur_egg_args {
 public:

  Dinosaur_egg_args() : calories_given(0) {
  }

  virtual ~Dinosaur_egg_args() throw() {}

  Direction::type direction;
  int32_t calories_given;

  _Dinosaur_egg_args__isset __isset;

  bool operator == (const Dinosaur_egg_args & rhs) const
  {
    if (!(direction == rhs.direction))
      return false;
    if (!(calories_given == rhs.calories_given))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_egg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_egg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dinosaur_egg_pargs {
 public:


  virtual ~Dinosaur_egg_pargs() throw() {}

  const Direction::type* direction;
  const int32_t* calories_given;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_egg_result__isset {
  _Dinosaur_egg_result__isset() : success(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_egg_result__isset;

class Dinosaur_egg_result {
 public:

  Dinosaur_egg_result() {
  }

  virtual ~Dinosaur_egg_result() throw() {}

  EggResults success;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_egg_result__isset __isset;

  bool operator == (const Dinosaur_egg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(youAreDead == rhs.youAreDead))
      return false;
    if (!(gameOver == rhs.gameOver))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_egg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_egg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_egg_presult__isset {
  _Dinosaur_egg_presult__isset() : success(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_egg_presult__isset;

class Dinosaur_egg_presult {
 public:


  virtual ~Dinosaur_egg_presult() throw() {}

  EggResults* success;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_egg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dinosaur_look_args__isset {
  _Dinosaur_look_args__isset() : direction(false) {}
  bool direction;
} _Dinosaur_look_args__isset;

class Dinosaur_look_args {
 public:

  Dinosaur_look_args() {
  }

  virtual ~Dinosaur_look_args() throw() {}

  Direction::type direction;

  _Dinosaur_look_args__isset __isset;

  bool operator == (const Dinosaur_look_args & rhs) const
  {
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_look_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_look_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dinosaur_look_pargs {
 public:


  virtual ~Dinosaur_look_pargs() throw() {}

  const Direction::type* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_look_result__isset {
  _Dinosaur_look_result__isset() : success(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_look_result__isset;

class Dinosaur_look_result {
 public:

  Dinosaur_look_result() {
  }

  virtual ~Dinosaur_look_result() throw() {}

  LookResults success;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_look_result__isset __isset;

  bool operator == (const Dinosaur_look_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(youAreDead == rhs.youAreDead))
      return false;
    if (!(gameOver == rhs.gameOver))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_look_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_look_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_look_presult__isset {
  _Dinosaur_look_presult__isset() : success(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_look_presult__isset;

class Dinosaur_look_presult {
 public:


  virtual ~Dinosaur_look_presult() throw() {}

  LookResults* success;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_look_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Dinosaur_grow_args {
 public:

  Dinosaur_grow_args() {
  }

  virtual ~Dinosaur_grow_args() throw() {}


  bool operator == (const Dinosaur_grow_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Dinosaur_grow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_grow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dinosaur_grow_pargs {
 public:


  virtual ~Dinosaur_grow_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_grow_result__isset {
  _Dinosaur_grow_result__isset() : success(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_grow_result__isset;

class Dinosaur_grow_result {
 public:

  Dinosaur_grow_result() {
  }

  virtual ~Dinosaur_grow_result() throw() {}

  GrowResults success;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_grow_result__isset __isset;

  bool operator == (const Dinosaur_grow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(youAreDead == rhs.youAreDead))
      return false;
    if (!(gameOver == rhs.gameOver))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_grow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_grow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_grow_presult__isset {
  _Dinosaur_grow_presult__isset() : success(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_grow_presult__isset;

class Dinosaur_grow_presult {
 public:


  virtual ~Dinosaur_grow_presult() throw() {}

  GrowResults* success;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_grow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Dinosaur_move_args__isset {
  _Dinosaur_move_args__isset() : direction(false) {}
  bool direction;
} _Dinosaur_move_args__isset;

class Dinosaur_move_args {
 public:

  Dinosaur_move_args() {
  }

  virtual ~Dinosaur_move_args() throw() {}

  Direction::type direction;

  _Dinosaur_move_args__isset __isset;

  bool operator == (const Dinosaur_move_args & rhs) const
  {
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_move_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_move_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Dinosaur_move_pargs {
 public:


  virtual ~Dinosaur_move_pargs() throw() {}

  const Direction::type* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_move_result__isset {
  _Dinosaur_move_result__isset() : success(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_move_result__isset;

class Dinosaur_move_result {
 public:

  Dinosaur_move_result() {
  }

  virtual ~Dinosaur_move_result() throw() {}

  MoveResults success;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_move_result__isset __isset;

  bool operator == (const Dinosaur_move_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(youAreDead == rhs.youAreDead))
      return false;
    if (!(gameOver == rhs.gameOver))
      return false;
    return true;
  }
  bool operator != (const Dinosaur_move_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dinosaur_move_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Dinosaur_move_presult__isset {
  _Dinosaur_move_presult__isset() : success(false), youAreDead(false), gameOver(false) {}
  bool success;
  bool youAreDead;
  bool gameOver;
} _Dinosaur_move_presult__isset;

class Dinosaur_move_presult {
 public:


  virtual ~Dinosaur_move_presult() throw() {}

  MoveResults* success;
  YouAreDeadException youAreDead;
  GameOverException gameOver;

  _Dinosaur_move_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DinosaurClient : virtual public DinosaurIf {
 public:
  DinosaurClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DinosaurClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void registerClient(RegisterClientResults& _return, const std::string& email, const std::string& highScoreName, const EntityType::type type);
  void send_registerClient(const std::string& email, const std::string& highScoreName, const EntityType::type type);
  void recv_registerClient(RegisterClientResults& _return);
  void hatch(DinosaurState& _return, const int64_t eggID);
  void send_hatch(const int64_t eggID);
  void recv_hatch(DinosaurState& _return);
  void egg(EggResults& _return, const Direction::type direction, const int32_t calories_given);
  void send_egg(const Direction::type direction, const int32_t calories_given);
  void recv_egg(EggResults& _return);
  void look(LookResults& _return, const Direction::type direction);
  void send_look(const Direction::type direction);
  void recv_look(LookResults& _return);
  void grow(GrowResults& _return);
  void send_grow();
  void recv_grow(GrowResults& _return);
  void move(MoveResults& _return, const Direction::type direction);
  void send_move(const Direction::type direction);
  void recv_move(MoveResults& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DinosaurProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<DinosaurIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (DinosaurProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_registerClient(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_egg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_look(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_grow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_move(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DinosaurProcessor(boost::shared_ptr<DinosaurIf> iface) :
    iface_(iface) {
    processMap_["registerClient"] = &DinosaurProcessor::process_registerClient;
    processMap_["hatch"] = &DinosaurProcessor::process_hatch;
    processMap_["egg"] = &DinosaurProcessor::process_egg;
    processMap_["look"] = &DinosaurProcessor::process_look;
    processMap_["grow"] = &DinosaurProcessor::process_grow;
    processMap_["move"] = &DinosaurProcessor::process_move;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~DinosaurProcessor() {}
};

class DinosaurMultiface : virtual public DinosaurIf {
 public:
  DinosaurMultiface(std::vector<boost::shared_ptr<DinosaurIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DinosaurMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DinosaurIf> > ifaces_;
  DinosaurMultiface() {}
  void add(boost::shared_ptr<DinosaurIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void registerClient(RegisterClientResults& _return, const std::string& email, const std::string& highScoreName, const EntityType::type type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->registerClient(_return, email, highScoreName, type);
        return;
      } else {
        ifaces_[i]->registerClient(_return, email, highScoreName, type);
      }
    }
  }

  void hatch(DinosaurState& _return, const int64_t eggID) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->hatch(_return, eggID);
        return;
      } else {
        ifaces_[i]->hatch(_return, eggID);
      }
    }
  }

  void egg(EggResults& _return, const Direction::type direction, const int32_t calories_given) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->egg(_return, direction, calories_given);
        return;
      } else {
        ifaces_[i]->egg(_return, direction, calories_given);
      }
    }
  }

  void look(LookResults& _return, const Direction::type direction) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->look(_return, direction);
        return;
      } else {
        ifaces_[i]->look(_return, direction);
      }
    }
  }

  void grow(GrowResults& _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->grow(_return);
        return;
      } else {
        ifaces_[i]->grow(_return);
      }
    }
  }

  void move(MoveResults& _return, const Direction::type direction) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->move(_return, direction);
        return;
      } else {
        ifaces_[i]->move(_return, direction);
      }
    }
  }

};



#endif
